<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\CH375_F103Host转发.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\CH375_F103Host转发.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jan 26 19:18:58 2021
<BR><P>
<H3>Maximum Stack Usage =        696 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CH375_APP &rArr; PrintfPlaySingle &rArr; PrintStrOut &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2b]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[13]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">BusFault_Handler</a><BR>
 <LI><a href="#[12]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">MemManage_Handler</a><BR>
 <LI><a href="#[14]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">CustomHID_Data_Setup</a> from usb_prop.o(i.CustomHID_Data_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[b]">CustomHID_GetConfigDescriptor</a> from usb_prop.o(i.CustomHID_GetConfigDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[a]">CustomHID_GetDeviceDescriptor</a> from usb_prop.o(i.CustomHID_GetDeviceDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[4c]">CustomHID_GetHIDDescriptor</a> from usb_prop.o(i.CustomHID_GetHIDDescriptor) referenced from usb_prop.o(i.CustomHID_Data_Setup)
 <LI><a href="#[4d]">CustomHID_GetProtocolValue</a> from usb_prop.o(i.CustomHID_GetProtocolValue) referenced from usb_prop.o(i.CustomHID_Data_Setup)
 <LI><a href="#[4b]">CustomHID_GetReportDescriptor</a> from usb_prop.o(i.CustomHID_GetReportDescriptor) referenced from usb_prop.o(i.CustomHID_Data_Setup)
 <LI><a href="#[c]">CustomHID_GetStringDescriptor</a> from usb_prop.o(i.CustomHID_GetStringDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[9]">CustomHID_Get_Interface_Setting</a> from usb_prop.o(i.CustomHID_Get_Interface_Setting) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[8]">CustomHID_NoData_Setup</a> from usb_prop.o(i.CustomHID_NoData_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[4]">CustomHID_Reset</a> from usb_prop.o(i.CustomHID_Reset) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[d]">CustomHID_SetConfiguration</a> from usb_prop.o(i.CustomHID_SetConfiguration) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[e]">CustomHID_SetDeviceAddress</a> from usb_prop.o(i.CustomHID_SetDeviceAddress) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[4e]">CustomHID_SetReport_Feature</a> from usb_prop.o(i.CustomHID_SetReport_Feature) referenced from usb_prop.o(i.CustomHID_Data_Setup)
 <LI><a href="#[5]">CustomHID_Status_In</a> from usb_prop.o(i.CustomHID_Status_In) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[6]">CustomHID_Status_Out</a> from usb_prop.o(i.CustomHID_Status_Out) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[3]">CustomHID_init</a> from usb_prop.o(i.CustomHID_init) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[24]">DMA1_Channel1_IRQHandler</a> from stm32_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">DMA1_Channel2_IRQHandler</a> from tm_dev_spi.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">DMA1_Channel3_IRQHandler</a> from tm_dev_spi.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">DMA1_Channel4_IRQHandler</a> from tm_dev_spi.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">DMA1_Channel5_IRQHandler</a> from tm_dev_spi.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">EP1_IN_Callback</a> from usb_endp.o(i.EP1_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[2]">EP1_OUT_Callback</a> from myhid_driver.o(i.EP1_OUT_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[1f]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">EXTI9_5_IRQHandler</a> from stm32_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[52]">GSM_SendSMS_Pack</a> from notecat.o(i.GSM_SendSMS_Pack) referenced from notecat.o(i.GSM_ControlStateMachine)
 <LI><a href="#[11]">HardFault_Handler</a> from cmb_fault.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NOP_Process</a> from usb_core.o(i.NOP_Process) referenced 38 times from usb_istr.o(.data)
 <LI><a href="#[1a]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[50]">Standard_GetConfiguration</a> from usb_core.o(i.Standard_GetConfiguration) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[51]">Standard_GetInterface</a> from usb_core.o(i.Standard_GetInterface) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[4f]">Standard_GetStatus</a> from usb_core.o(i.Standard_GetStatus) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[18]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[45]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[1b]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from printer.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from notecat.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">USBWakeUp_IRQHandler</a> from stm32_it.o(i.USBWakeUp_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32_it.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[46]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[48]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[49]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[47]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[54]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[53]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4a]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[44]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[46]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[171]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[55]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[172]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[173]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[174]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[175]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[176]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmb_fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = HardFault_Handler &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfPlaySingle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateWillResults
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithResultOrder_A3
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_EatBig_LoseSmall
</UL>

<P><STRONG><a name="[177]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetPack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Send_Report
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_OUT_Callback
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTheForwardingProcess
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAM_SmsRecCms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStartOrder_A2
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_19
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_11
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375InitSysVar
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfPlaySingle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printer_RecDatUser
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetPack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_RecDatUser
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAM_SmsRecCms
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Send_Report
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_OUT_Callback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_EatBig_LoseSmall
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[160]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
</UL>

<P><STRONG><a name="[f9]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStrOut
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendSMS_Pack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_BasicCommands
</UL>

<P><STRONG><a name="[5b]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSM_CSQ
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
</UL>

<P><STRONG><a name="[5d]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[70]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTheMagnificationScore
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTheMagnificationScore
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTheMagnificationScore
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[17d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[5c]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[47]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[60]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[56]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[17f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[180]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[181]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[6f]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[182]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>ByteSwap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(i.ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[87]"></a>CH375AnalyDevInfo</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, host_sys.o(i.CH375AnalyDevInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH375AnalyDevInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetConfDesc
</UL>

<P><STRONG><a name="[71]"></a>CH375BusReset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, host_sys.o(i.CH375BusReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CH375BusReset &rArr; CH375WaitInterrupt &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WaitInterrupt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetMode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetFreq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[77]"></a>CH375CheckConnect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, host_sys.o(i.CH375CheckConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CH375CheckConnect &rArr; CH375DeviceConnect &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375InitSysVar
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DeviceConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[7a]"></a>CH375ClearEdpFeature</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, host_sys.o(i.CH375ClearEdpFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CH375ClearEdpFeature &rArr; CH375CtlTrans &rArr; CH375StartTrans &rArr; CH375WaitInterrupt &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FindEndp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375CtlTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375OutTrans
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375InTrans
</UL>

<P><STRONG><a name="[7c]"></a>CH375CtlTrans</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, host_sys.o(i.CH375CtlTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = CH375CtlTrans &rArr; CH375StartTrans &rArr; CH375WaitInterrupt &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375StartTrans
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetRetry
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetDeviceConf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetConfDesc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ClearEdpFeature
</UL>

<P><STRONG><a name="[78]"></a>CH375DeviceConnect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, host_sys.o(i.CH375DeviceConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CH375DeviceConnect &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query375Interrupt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375CheckConnect
</UL>

<P><STRONG><a name="[7b]"></a>CH375FindEndp</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, host_sys.o(i.CH375FindEndp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH375FindEndp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375OutTrans
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375InTrans
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ClearEdpFeature
</UL>

<P><STRONG><a name="[86]"></a>CH375GetConfDesc</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, host_sys.o(i.CH375GetConfDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CH375GetConfDesc &rArr; CH375CtlTrans &rArr; CH375StartTrans &rArr; CH375WaitInterrupt &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375CtlTrans
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375AnalyDevInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[88]"></a>CH375GetDeviceDesc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, host_sys.o(i.CH375GetDeviceDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CH375GetDeviceDesc &rArr; CH375WaitInterrupt &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WaitInterrupt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[72]"></a>CH375GetFreq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, host_sys.o(i.CH375GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CH375GetFreq &rArr; CH375SetMode &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375BusReset
</UL>

<P><STRONG><a name="[82]"></a>CH375GetIntStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, host_sys.o(i.CH375GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WaitInterrupt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DeviceConnect
</UL>

<P><STRONG><a name="[8a]"></a>CH375InTrans</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, host_sys.o(i.CH375InTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = CH375InTrans &rArr; CH375ClearEdpFeature &rArr; CH375CtlTrans &rArr; CH375StartTrans &rArr; CH375WaitInterrupt &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375StartTrans
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetRetry
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FindEndp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ClearEdpFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[79]"></a>CH375InitSysVar</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, host_sys.o(i.CH375InitSysVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CH375InitSysVar
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375CheckConnect
</UL>

<P><STRONG><a name="[8b]"></a>CH375OutTrans</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, host_sys.o(i.CH375OutTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = CH375OutTrans &rArr; CH375ClearEdpFeature &rArr; CH375CtlTrans &rArr; CH375StartTrans &rArr; CH375WaitInterrupt &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375StartTrans
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetRetry
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FindEndp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ClearEdpFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostHID_SendReport
</UL>

<P><STRONG><a name="[80]"></a>CH375ReadBlock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, host_sys.o(i.CH375ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CH375ReadBlock &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375InTrans
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetDeviceDesc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375CtlTrans
</UL>

<P><STRONG><a name="[8c]"></a>CH375SetDeviceAddr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, host_sys.o(i.CH375SetDeviceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CH375SetDeviceAddr &rArr; CH375WaitInterrupt &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WaitInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[8d]"></a>CH375SetDeviceConf</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, host_sys.o(i.CH375SetDeviceConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CH375SetDeviceConf &rArr; CH375CtlTrans &rArr; CH375StartTrans &rArr; CH375WaitInterrupt &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WaitInterrupt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375CtlTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[76]"></a>CH375SetFreq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, host_sys.o(i.CH375SetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH375SetFreq &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375BusReset
</UL>

<P><STRONG><a name="[73]"></a>CH375SetMode</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, host_sys.o(i.CH375SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CH375SetMode &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetFreq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375BusReset
</UL>

<P><STRONG><a name="[7d]"></a>CH375SetRetry</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, host_sys.o(i.CH375SetRetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH375SetRetry &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375OutTrans
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375InTrans
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375CtlTrans
</UL>

<P><STRONG><a name="[7f]"></a>CH375StartTrans</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, host_sys.o(i.CH375StartTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CH375StartTrans &rArr; CH375WaitInterrupt &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WaitInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375OutTrans
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375InTrans
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375CtlTrans
</UL>

<P><STRONG><a name="[75]"></a>CH375WaitInterrupt</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, host_sys.o(i.CH375WaitInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CH375WaitInterrupt &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query375Interrupt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375StartTrans
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetDeviceConf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetDeviceAddr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetDeviceDesc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375BusReset
</UL>

<P><STRONG><a name="[7e]"></a>CH375WriteBlock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, host_sys.o(i.CH375WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH375WriteBlock &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375OutTrans
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375CtlTrans
</UL>

<P><STRONG><a name="[8e]"></a>CH375_APP</STRONG> (Thumb, 3074 bytes, Stack size 72 bytes, ch375_app.o(i.CH375_APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CH375_APP &rArr; PrintfPlaySingle &rArr; PrintStrOut &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_strstr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_que_size
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_que_Write
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_que_Read
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_size
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_Read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_ClearFlag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_CheckFlag
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfPlaySingle
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotalPoints
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetPack
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH375Host
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetDeviceConf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetDeviceAddr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375InitSysVar
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375InTrans
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetDeviceDesc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetConfDesc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375CheckConnect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375BusReset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Send_Report
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTheForwardingProcess
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostHID_SendReport
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStartOrder_A2
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_19
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_11
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithRoadOrderResult_A0
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithResultOrder_A3
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>CH375_PORT_INIT</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, para.o(i.CH375_PORT_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CH375_PORT_INIT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH375Host
</UL>

<P><STRONG><a name="[b2]"></a>CTR_LP</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, usb_int.o(i.CTR_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[e6]"></a>CalculateTheDifference</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ch375_app.o(i.CalculateTheDifference))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_19
</UL>

<P><STRONG><a name="[b6]"></a>CalculateTheMagnificationScore</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ch375_app.o(i.CalculateTheMagnificationScore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CalculateTheMagnificationScore &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_19
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_11
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_EatBig_LoseSmall
</UL>

<P><STRONG><a name="[b7]"></a>Calculate_EatBig_LoseSmall</STRONG> (Thumb, 312 bytes, Stack size 96 bytes, ch375_app.o(i.Calculate_EatBig_LoseSmall))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Calculate_EatBig_LoseSmall &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_u32
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_ZeroCnt
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTheMagnificationScore
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithResultOrder_A3
</UL>

<P><STRONG><a name="[b8]"></a>Calculate_ZeroCnt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ch375_app.o(i.Calculate_ZeroCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Calculate_ZeroCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_EatBig_LoseSmall
</UL>

<P><STRONG><a name="[db]"></a>CheckAllowChangeResult</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ch375_app.o(i.CheckAllowChangeResult))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithResultOrder_A3
</UL>

<P><STRONG><a name="[12e]"></a>ClearDTOG_RX</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[12d]"></a>ClearDTOG_TX</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[c6]"></a>Clear_Status_Out</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(i.Clear_Status_Out))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[161]"></a>ComputeCRC16</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, hid_data.o(i.ComputeCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ComputeCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDataReCRC
</UL>

<P><STRONG><a name="[7]"></a>CustomHID_Data_Setup</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_prop.o(i.CustomHID_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomHID_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>CustomHID_GetConfigDescriptor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_GetConfigDescriptor))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>CustomHID_GetDeviceDescriptor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_GetDeviceDescriptor))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>CustomHID_GetHIDDescriptor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_GetHIDDescriptor))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.CustomHID_Data_Setup)
</UL>
<P><STRONG><a name="[4d]"></a>CustomHID_GetProtocolValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_GetProtocolValue))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.CustomHID_Data_Setup)
</UL>
<P><STRONG><a name="[4b]"></a>CustomHID_GetReportDescriptor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_GetReportDescriptor))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.CustomHID_Data_Setup)
</UL>
<P><STRONG><a name="[c]"></a>CustomHID_GetStringDescriptor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_GetStringDescriptor))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>CustomHID_Get_Interface_Setting</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>CustomHID_NoData_Setup</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_NoData_Setup))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_SetProtocol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>CustomHID_Reset</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, usb_prop.o(i.CustomHID_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CustomHID_Reset &rArr; SetDeviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>CustomHID_SetConfiguration</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_SetConfiguration))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>CustomHID_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_SetDeviceAddress))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[c0]"></a>CustomHID_SetProtocol</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_SetProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_NoData_Setup
</UL>

<P><STRONG><a name="[4e]"></a>CustomHID_SetReport_Feature</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_SetReport_Feature))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.CustomHID_Data_Setup)
</UL>
<P><STRONG><a name="[5]"></a>CustomHID_Status_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_Status_In))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>CustomHID_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.CustomHID_Status_Out))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>CustomHID_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_prop.o(i.CustomHID_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CustomHID_init &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tm_dev_spi.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tm_dev_spi.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tm_dev_spi.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tm_dev_spi.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>DMA_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>DealWithResultOrder_A3</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, ch375_app.o(i.DealWithResultOrder_A3))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DealWithResultOrder_A3 &rArr; Calculate_EatBig_LoseSmall &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInningNum
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBoutResult
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBoutCout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlaySingle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoutResult
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDataReCRC
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAllowChangeResult
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_EatBig_LoseSmall
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[a3]"></a>DealWithRoadOrderResult_A0</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, ch375_app.o(i.DealWithRoadOrderResult_A0))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DealWithRoadOrderResult_A0 &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlaySingle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInningNum
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoutResult
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoutCout
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDataReCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[a7]"></a>DealWithStakeOrder_11</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, ch375_app.o(i.DealWithStakeOrder_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DealWithStakeOrder_11 &rArr; CalculateTheMagnificationScore &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotalPoints
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSynthesisArray
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDataReCRC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayCompositeData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalScoreAfterGettingTheDifference
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTheMagnificationScore
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[a8]"></a>DealWithStakeOrder_19</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, ch375_app.o(i.DealWithStakeOrder_19))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DealWithStakeOrder_19 &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTotalPoints
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotalPoints
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSynthesisArray
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDataReCRC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayCompositeData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalScoreAfterGettingTheDifference
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTheMagnificationScore
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTheDifference
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[a2]"></a>DealWithStartOrder_A2</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ch375_app.o(i.DealWithStartOrder_A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DealWithStartOrder_A2 &rArr; SavePlaySingle &rArr; dev_SaveWriteByte &rArr; FM25WriteString &rArr; FM25CL64B_WriteByte &rArr; FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePlaySingle
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBoutResult
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[16]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>DockingNoteCat_Control</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hid_data.o(i.DockingNoteCat_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DockingNoteCat_Control &rArr; GenerateWillResults &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateWillResults
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTotalPoints
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotalPoints
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
</UL>

<P><STRONG><a name="[0]"></a>EP1_IN_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_endp.o(i.EP1_IN_Callback))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>EP1_OUT_Callback</STRONG> (Thumb, 74 bytes, Stack size 80 bytes, myhid_driver.o(i.EP1_OUT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EP1_OUT_Callback &rArr; TM_que_Write &rArr; TM_que_size
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_que_Write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_it.o(i.EXTI9_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[144]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBWakeUp_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>FM25CL64B_ReadByte</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_dri.o(i.FM25CL64B_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FM25CL64B_ReadByte &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_Text
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25ReadString
</UL>

<P><STRONG><a name="[f0]"></a>FM25CL64B_Text</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_dri.o(i.FM25CL64B_Text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FM25CL64B_Text &rArr; FM25CL64B_WriteByte &rArr; FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_WriteByte
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>FM25CL64B_WriteByte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi_dri.o(i.FM25CL64B_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FM25CL64B_WriteByte &rArr; FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_Byte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_Write_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_Text
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25WriteString
</UL>

<P><STRONG><a name="[f2]"></a>FM25CL64B_Write_Enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi_dri.o(i.FM25CL64B_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_WriteByte
</UL>

<P><STRONG><a name="[f3]"></a>FM25ReadString</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, spi_dri.o(i.FM25ReadString))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FM25ReadString &rArr; FM25CL64B_ReadByte &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveReadByte
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdministratorPhone
</UL>

<P><STRONG><a name="[f4]"></a>FM25WriteString</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, spi_dri.o(i.FM25WriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FM25WriteString &rArr; FM25CL64B_WriteByte &rArr; FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveWriteByte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAdministratorPhone
</UL>

<P><STRONG><a name="[f5]"></a>GAM_SmsRecCms</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, notecat.o(i.GAM_SmsRecCms))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GAM_SmsRecCms &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
</UL>

<P><STRONG><a name="[f6]"></a>GPIO_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hw_config.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[b1]"></a>GPIO_Init</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_INT_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_PORT_INIT
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[16b]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_Write_Enable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_WriteByte
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_ReadByte
</UL>

<P><STRONG><a name="[ef]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_Write_Enable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_WriteByte
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_ReadByte
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>

<P><STRONG><a name="[f7]"></a>GSM_BasicCommands</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, notecat.o(i.GSM_BasicCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GSM_BasicCommands &rArr; GSM_SendCmd &rArr; NoteCat_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_strstr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGSM_Connect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSM_CSQ
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
</UL>

<P><STRONG><a name="[fb]"></a>GSM_CMRG</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, notecat.o(i.GSM_CMRG))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GSM_CMRG &rArr; GSM_SendCmd &rArr; NoteCat_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_strstr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
</UL>

<P><STRONG><a name="[94]"></a>GSM_ControlStateMachine</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, notecat.o(i.GSM_ControlStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GSM_ControlStateMachine &rArr; GSM_SmsOneDeal &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_ClearFlag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_CheckFlag
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGSM_Connect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_strstr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSM_CSQ
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendSMS_Pack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_DeleteSMS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_CMRG
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_BasicCommands
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[fc]"></a>GSM_DeleteSMS</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, notecat.o(i.GSM_DeleteSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GSM_DeleteSMS &rArr; checkGSM_Connect &rArr; GSM_BasicCommands &rArr; GSM_SendCmd &rArr; NoteCat_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGSM_Connect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_strstr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
</UL>

<P><STRONG><a name="[f8]"></a>GSM_SendCmd</STRONG> (Thumb, 50 bytes, Stack size 128 bytes, notecat.o(i.GSM_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GSM_SendCmd &rArr; NoteCat_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_SendString
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_RecDatUser
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendSMS_Pack
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_DeleteSMS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_CMRG
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_BasicCommands
</UL>

<P><STRONG><a name="[52]"></a>GSM_SendSMS_Pack</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, notecat.o(i.GSM_SendSMS_Pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GSM_SendSMS_Pack &rArr; GSM_SendCmd &rArr; NoteCat_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_strstr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_SendString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_SendByte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_RecDatUser
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> notecat.o(i.GSM_ControlStateMachine)
</UL>
<P><STRONG><a name="[100]"></a>GSM_SmsOneDeal</STRONG> (Thumb, 390 bytes, Stack size 144 bytes, notecat.o(i.GSM_SmsOneDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GSM_SmsOneDeal &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DockingNoteCat_Control
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToNumber
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAdministratorPhone
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_strstr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_ReadyUnRegistered
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsContentPackStartAddr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAM_SmsRecCms
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
</UL>

<P><STRONG><a name="[ff]"></a>GSM_SmsOneDeal_2</STRONG> (Thumb, 398 bytes, Stack size 136 bytes, notecat.o(i.GSM_SmsOneDeal_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GSM_SmsOneDeal_2 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DockingNoteCat_Control
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToNumber
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAdministratorPhone
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_strstr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_ReadyUnRegistered
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsContentPackStartAddr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAM_SmsRecCms
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
</UL>

<P><STRONG><a name="[ea]"></a>GenerateWillResults</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ch375_app.o(i.GenerateWillResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GenerateWillResults &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePlaySingle
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBoutResult
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlaySingle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FilterScan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DockingNoteCat_Control
</UL>

<P><STRONG><a name="[d6]"></a>GetEPRxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[eb]"></a>GetEPRxCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_OUT_Callback
</UL>

<P><STRONG><a name="[d3]"></a>GetEPTxAddr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[10b]"></a>GetEPTxStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Send_Report
</UL>

<P><STRONG><a name="[fe]"></a>GetGSM_CSQ</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, notecat.o(i.GetGSM_CSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GetGSM_CSQ &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_strstr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_BasicCommands
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
</UL>

<P><STRONG><a name="[106]"></a>GetSmsContentPackStartAddr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, notecat.o(i.GetSmsContentPackStartAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetSmsContentPackStartAddr &rArr; NoteCat_strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
</UL>

<P><STRONG><a name="[cc]"></a>Get_SerialNum</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hw_config.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_init
</UL>

<P><STRONG><a name="[a1]"></a>HID_GetPack</STRONG> (Thumb, 232 bytes, Stack size 120 bytes, hid_data.o(i.HID_GetPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HID_GetPack
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[aa]"></a>HID_Send_Report</STRONG> (Thumb, 80 bytes, Stack size 80 bytes, myhid_driver.o(i.HID_Send_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HID_Send_Report &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxValid
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxStatus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTheForwardingProcess
</UL>

<P><STRONG><a name="[ab]"></a>HostHID_SendReport</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ch375_app.o(i.HostHID_SendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = HostHID_SendReport &rArr; CH375OutTrans &rArr; CH375ClearEdpFeature &rArr; CH375CtlTrans &rArr; CH375StartTrans &rArr; CH375WaitInterrupt &rArr; CH375GetIntStatus &rArr; xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375OutTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[b3]"></a>In0_Process</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, usb_core.o(i.In0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[10e]"></a>Key_FilterScan</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, key.o(i.Key_FilterScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Key_FilterScan &rArr; GenerateWillResults &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneSignalStabillzerOneKey
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateWillResults
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTotalPoints
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotalPoints
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>Key_defaults</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, key.o(i.Key_defaults))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>Leave_LowPowerMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hw_config.o(i.Leave_LowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Leave_LowPowerMode &rArr; SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>

<P><STRONG><a name="[12]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(i.NOP_Process))
<BR>[Address Reference Count : 3]<UL><LI> usb_prop.o(.data)
<LI> usb_istr.o(.data)
<LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[13f]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
</UL>

<P><STRONG><a name="[16a]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>NoteCat_OutTimeTiming</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, notecat.o(i.NoteCat_OutTimeTiming))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>NoteCat_ReadyUnRegistered</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, notecat.o(i.NoteCat_ReadyUnRegistered))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
</UL>

<P><STRONG><a name="[102]"></a>NoteCat_RecDatUser</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, notecat.o(i.NoteCat_RecDatUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NoteCat_RecDatUser
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendSMS_Pack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendCmd
</UL>

<P><STRONG><a name="[104]"></a>NoteCat_SendByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, notecat.o(i.NoteCat_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NoteCat_SendByte &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendSMS_Pack
</UL>

<P><STRONG><a name="[103]"></a>NoteCat_SendString</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, notecat.o(i.NoteCat_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NoteCat_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendSMS_Pack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendCmd
</UL>

<P><STRONG><a name="[fa]"></a>NoteCat_strstr</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, notecat.o(i.NoteCat_strstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NoteCat_strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmsContentPackStartAddr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGSM_CSQ
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendSMS_Pack
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_DeleteSMS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_CMRG
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_BasicCommands
</UL>

<P><STRONG><a name="[b5]"></a>Out0_Process</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_core.o(i.Out0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Out0_Process &rArr; DataStageOut
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[d7]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_mem.o(i.PMAToUserBufferCopy))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_OUT_Callback
</UL>

<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>PinterSendByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printer.o(i.PinterSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PinterSendByte &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_AsciiToGb
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintWordEncoding
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStrOut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinterSendCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckProntPaper
</UL>

<P><STRONG><a name="[be]"></a>PinterSendCmd</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, printer.o(i.PinterSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PinterSendCmd &rArr; PinterSendByte &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinterSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfPlaySingle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStrOut
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckProntPaper
</UL>

<P><STRONG><a name="[10d]"></a>Post0_Process</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.Post0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Post0_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[cd]"></a>PowerOn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_pwr.o(i.PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_init
</UL>

<P><STRONG><a name="[118]"></a>PrintStrOut</STRONG> (Thumb, 164 bytes, Stack size 144 bytes, printer.o(i.PrintStrOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = PrintStrOut &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf_AsciiToGb
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintWordEncoding
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinterSendCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinterSendByte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfPlaySingle
</UL>

<P><STRONG><a name="[11a]"></a>PrintWordEncoding</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, printer.o(i.PrintWordEncoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PrintWordEncoding &rArr; PinterSendByte &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinterSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStrOut
</UL>

<P><STRONG><a name="[135]"></a>Print_OutTimeTiming</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, printer.o(i.Print_OutTimeTiming))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>Printer_RecDatUser</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, printer.o(i.Printer_RecDatUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Printer_RecDatUser
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckProntPaper
</UL>

<P><STRONG><a name="[93]"></a>PrintfPlaySingle</STRONG> (Thumb, 878 bytes, Stack size 304 bytes, printer.o(i.PrintfPlaySingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = PrintfPlaySingle &rArr; PrintStrOut &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_ClearFlag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_CheckFlag
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStrOut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinterSendCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckProntPaper
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoutResult
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[119]"></a>Printf_AsciiToGb</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, printer.o(i.Printf_AsciiToGb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Printf_AsciiToGb &rArr; PinterSendByte &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinterSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStrOut
</UL>

<P><STRONG><a name="[81]"></a>Query375Interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, para.o(i.Query375Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WaitInterrupt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DeviceConnect
</UL>

<P><STRONG><a name="[128]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[12b]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[b0]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_PORT_INIT
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[143]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[12a]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_USBCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[11b]"></a>ReadAdministratorPhone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, notecat.o(i.ReadAdministratorPhone))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadAdministratorPhone &rArr; FM25ReadString &rArr; FM25CL64B_ReadByte &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25ReadString
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOpenGSM_Init
</UL>

<P><STRONG><a name="[e0]"></a>ReadBoutCout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hid_data.o(i.ReadBoutCout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadBoutCout &rArr; dev_SaveReadByte &rArr; FM25ReadString &rArr; FM25CL64B_ReadByte &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithRoadOrderResult_A0
</UL>

<P><STRONG><a name="[da]"></a>ReadBoutResult</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hid_data.o(i.ReadBoutResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadBoutResult &rArr; dev_SaveReadByte &rArr; FM25ReadString &rArr; FM25CL64B_ReadByte &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfPlaySingle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithRoadOrderResult_A0
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithResultOrder_A3
</UL>

<P><STRONG><a name="[e1]"></a>ReadInningNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hid_data.o(i.ReadInningNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadInningNum &rArr; dev_SaveReadByte &rArr; FM25ReadString &rArr; FM25CL64B_ReadByte &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithRoadOrderResult_A0
</UL>

<P><STRONG><a name="[d9]"></a>ReadPlaySingle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hid_data.o(i.ReadPlaySingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadPlaySingle &rArr; dev_SaveReadByte &rArr; FM25ReadString &rArr; FM25CL64B_ReadByte &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateWillResults
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithRoadOrderResult_A0
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithResultOrder_A3
</UL>

<P><STRONG><a name="[9f]"></a>ReadTotalPoints</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hid_data.o(i.ReadTotalPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadTotalPoints &rArr; dev_SaveReadByte &rArr; FM25ReadString &rArr; FM25CL64B_ReadByte &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FilterScan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DockingNoteCat_Control
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_19
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_11
</UL>

<P><STRONG><a name="[11d]"></a>ReportPack_encrypt</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ch375_app.o(i.ReportPack_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ReportPack_encrypt &rArr; des &rArr; compute_subkeys &rArr; transpose
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlTheForwardingProcess
</UL>

<P><STRONG><a name="[11e]"></a>Resume</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usb_pwr.o(i.Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Resume &rArr; Resume_Init &rArr; Leave_LowPowerMode &rArr; SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[11f]"></a>Resume_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_pwr.o(i.Resume_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Resume_Init &rArr; Leave_LowPowerMode &rArr; SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[120]"></a>SPI1_Init</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, spi_dri.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25CL64_gpio_Init
</UL>

<P><STRONG><a name="[122]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[123]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_Byte
</UL>

<P><STRONG><a name="[125]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_Byte
</UL>

<P><STRONG><a name="[124]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send_Byte
</UL>

<P><STRONG><a name="[121]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[ee]"></a>SPI_Send_Byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spi_dri.o(i.SPI_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_Write_Enable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_WriteByte
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_ReadByte
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>SaveAdministratorPhone</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, notecat.o(i.SaveAdministratorPhone))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SaveAdministratorPhone &rArr; FM25WriteString &rArr; FM25CL64B_WriteByte &rArr; FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25WriteString
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
</UL>

<P><STRONG><a name="[df]"></a>SaveBoutCout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hid_data.o(i.SaveBoutCout))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SaveBoutCout &rArr; dev_SaveWriteByte &rArr; FM25WriteString &rArr; FM25CL64B_WriteByte &rArr; FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithResultOrder_A3
</UL>

<P><STRONG><a name="[dd]"></a>SaveBoutResult</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hid_data.o(i.SaveBoutResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SaveBoutResult &rArr; dev_SaveWriteByte &rArr; FM25WriteString &rArr; FM25CL64B_WriteByte &rArr; FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateWillResults
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStartOrder_A2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithResultOrder_A3
</UL>

<P><STRONG><a name="[de]"></a>SaveInningNum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hid_data.o(i.SaveInningNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SaveInningNum &rArr; dev_SaveWriteByte &rArr; FM25WriteString &rArr; FM25CL64B_WriteByte &rArr; FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithResultOrder_A3
</UL>

<P><STRONG><a name="[e8]"></a>SavePlaySingle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hid_data.o(i.SavePlaySingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SavePlaySingle &rArr; dev_SaveWriteByte &rArr; FM25WriteString &rArr; FM25CL64B_WriteByte &rArr; FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateWillResults
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStartOrder_A2
</UL>

<P><STRONG><a name="[e7]"></a>SaveTotalPoints</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, hid_data.o(i.SaveTotalPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SaveTotalPoints &rArr; dev_SaveWriteByte &rArr; FM25WriteString &rArr; FM25CL64B_WriteByte &rArr; FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FilterScan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DockingNoteCat_Control
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_19
</UL>

<P><STRONG><a name="[c1]"></a>SetBTABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(i.SetBTABLE))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[cb]"></a>SetDeviceAddress</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, usb_core.o(i.SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[c4]"></a>SetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[c7]"></a>SetEPRxCount</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[ca]"></a>SetEPRxStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[c8]"></a>SetEPRxValid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxValid))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_OUT_Callback
</UL>

<P><STRONG><a name="[c5]"></a>SetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[c9]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Send_Report
</UL>

<P><STRONG><a name="[c3]"></a>SetEPTxStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[10c]"></a>SetEPTxValid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxValid))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Send_Report
</UL>

<P><STRONG><a name="[c2]"></a>SetEPType</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPType))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_Reset
</UL>

<P><STRONG><a name="[127]"></a>Set_System</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_config.o(i.Set_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_System &rArr; GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Init
</UL>

<P><STRONG><a name="[129]"></a>Set_USBClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_config.o(i.Set_USBClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_USBClock
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Init
</UL>

<P><STRONG><a name="[b4]"></a>Setup0_Process</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usb_core.o(i.Setup0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[115]"></a>Standard_ClearFeature</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, usb_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_ClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[50]"></a>Standard_GetConfiguration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[bf]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetStringDescriptor
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetReportDescriptor
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetHIDDescriptor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetDeviceDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_GetConfigDescriptor
</UL>

<P><STRONG><a name="[51]"></a>Standard_GetInterface</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[4f]"></a>Standard_GetStatus</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[112]"></a>Standard_SetConfiguration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[113]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[116]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usb_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[114]"></a>Standard_SetInterface</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[12f]"></a>StartOpenGSM_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, notecat.o(i.StartOpenGSM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StartOpenGSM_Init &rArr; ReadAdministratorPhone &rArr; FM25ReadString &rArr; FM25CL64B_ReadByte &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdministratorPhone
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>StrToNumber</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, notecat.o(i.StrToNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = StrToNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
</UL>

<P><STRONG><a name="[149]"></a>Suspend</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, usb_pwr.o(i.Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[167]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>TIM2_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TIM2_IRQHandler &rArr; Key_FilterScan &rArr; GenerateWillResults &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_OutTimeTiming
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_OutTimeTiming
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FilterScan
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_Timer_MultiScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[131]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[13d]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[137]"></a>TM_GPIO_GetPortSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tm_stm32_gpio.o(i.TM_GPIO_GetPortSource))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_INT_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_INT_EnableClock
</UL>

<P><STRONG><a name="[136]"></a>TM_GPIO_INT_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tm_stm32_gpio.o(i.TM_GPIO_INT_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TM_GPIO_INT_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_GetPortSource
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_Init
</UL>

<P><STRONG><a name="[138]"></a>TM_GPIO_INT_Init</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, tm_stm32_gpio.o(i.TM_GPIO_INT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_GetPortSource
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_Init
</UL>

<P><STRONG><a name="[139]"></a>TM_GPIO_Init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tm_stm32_gpio.o(i.TM_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_INT_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_INT_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
</UL>

<P><STRONG><a name="[13a]"></a>TM_que_AllRegistInit</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, tm_que.o(i.TM_que_AllRegistInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TM_que_AllRegistInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_que_Regist
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>TM_que_Read</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, tm_que.o(i.TM_que_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_que_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[13b]"></a>TM_que_Regist</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tm_que.o(i.TM_que_Regist))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_que_AllRegistInit
</UL>

<P><STRONG><a name="[98]"></a>TM_que_Write</STRONG> (Thumb, 156 bytes, Stack size 36 bytes, tm_que.o(i.TM_que_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TM_que_Write &rArr; TM_que_size
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_que_size
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_OUT_Callback
</UL>

<P><STRONG><a name="[9c]"></a>TM_que_size</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, tm_que.o(i.TM_que_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TM_que_size
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_que_Write
</UL>

<P><STRONG><a name="[13c]"></a>Timer2_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, timer.o(i.Timer2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Timer2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>TotalScoreAfterGettingTheDifference</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ch375_app.o(i.TotalScoreAfterGettingTheDifference))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_19
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_11
</UL>

<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; que_Write &rArr; que_size
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, printer.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; que_Write &rArr; que_size
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, notecat.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14d]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>

<P><STRONG><a name="[14b]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>

<P><STRONG><a name="[14f]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[14c]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>

<P><STRONG><a name="[142]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
</UL>

<P><STRONG><a name="[14e]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[95]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ch375_app.o(i.USBH_ParseDevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBH_ParseDevDesc &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[43]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_it.o(i.USBWakeUp_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>USB_Cable_Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_config.o(i.USB_Cable_Config))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[145]"></a>USB_HID_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, myhid_driver.o(i.USB_HID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_HID_Init &rArr; Set_System &rArr; GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>USB_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_init.o(i.USB_Init))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Init
</UL>

<P><STRONG><a name="[146]"></a>USB_Interrupts_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hw_config.o(i.USB_Interrupts_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Init
</UL>

<P><STRONG><a name="[148]"></a>USB_Istr</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, usb_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2d]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32_it.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>USB_SIL_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_sil.o(i.USB_SIL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHID_init
</UL>

<P><STRONG><a name="[14]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14a]"></a>Usart_Init</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, usart.o(i.Usart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Usart_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>Usart_SendByte</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usart.o(i.Usart_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinterSendByte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_SendString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoteCat_SendByte
</UL>

<P><STRONG><a name="[a4]"></a>Usart_SendString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usart.o(i.Usart_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
</UL>

<P><STRONG><a name="[d4]"></a>UserToPMABufferCopy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_mem.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Send_Report
</UL>

<P><STRONG><a name="[150]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[184]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[109]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
</UL>

<P><STRONG><a name="[185]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[186]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[152]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[187]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[188]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[189]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[101]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStrOut
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendCmd
</UL>

<P><STRONG><a name="[18a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[18b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[18c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e2]"></a>arrayCompositeData</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, ch375_app.o(i.arrayCompositeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arrayCompositeData &rArr; bigendianSyntheticData
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigendianSyntheticData
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_19
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_11
</UL>

<P><STRONG><a name="[165]"></a>bigendDataFormDecomposition</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ch375_app.o(i.bigendDataFormDecomposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bigendDataFormDecomposition
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSynthesisArray
</UL>

<P><STRONG><a name="[158]"></a>bigendianSyntheticData</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ch375_app.o(i.bigendianSyntheticData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bigendianSyntheticData
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayCompositeData
</UL>

<P><STRONG><a name="[159]"></a>checkFirstFlag</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, hid_data.o(i.checkFirstFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = checkFirstFlag &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearResult_100bout
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTotalPoints
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePlaySingle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInningNum
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBoutCout
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotalPoints
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInningNum
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoutResult
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoutCout
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveWriteByte
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>checkGSM_Connect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, notecat.o(i.checkGSM_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = checkGSM_Connect &rArr; GSM_BasicCommands &rArr; GSM_SendCmd &rArr; NoteCat_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_BasicCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_DeleteSMS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
</UL>

<P><STRONG><a name="[15a]"></a>clearResult_100bout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hid_data.o(i.clearResult_100bout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clearResult_100bout &rArr; dev_SaveWriteByte &rArr; FM25WriteString &rArr; FM25CL64B_WriteByte &rArr; FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_SaveWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
</UL>

<P><STRONG><a name="[16e]"></a>cm_backtrace_call_stack</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, cm_backtrace.o(i.cm_backtrace_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cm_backtrace_call_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[57]"></a>cm_backtrace_fault</STRONG> (Thumb, 390 bytes, Stack size 88 bytes, cm_backtrace.o(i.cm_backtrace_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = cm_backtrace_fault &rArr; print_call_stack &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[15b]"></a>cm_backtrace_firmware_info</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cm_backtrace.o(i.cm_backtrace_firmware_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cm_backtrace_firmware_info &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[15f]"></a>cm_backtrace_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cm_backtrace.o(i.cm_backtrace_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = cm_backtrace_init &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>commandDataReCRC</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ch375_app.o(i.commandDataReCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = commandDataReCRC &rArr; ComputeCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_19
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_11
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithRoadOrderResult_A0
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithResultOrder_A3
</UL>

<P><STRONG><a name="[ae]"></a>controlTheForwardingProcess</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, ch375_app.o(i.controlTheForwardingProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = controlTheForwardingProcess &rArr; ReportPack_encrypt &rArr; des &rArr; compute_subkeys &rArr; transpose
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Send_Report
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportPack_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[e5]"></a>dataSynthesisArray</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ch375_app.o(i.dataSynthesisArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dataSynthesisArray &rArr; bigendDataFormDecomposition
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigendDataFormDecomposition
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_19
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_11
</UL>

<P><STRONG><a name="[166]"></a>delay_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>delay_ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms1
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH375Host
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375CheckConnect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375BusReset
</UL>

<P><STRONG><a name="[168]"></a>delay_ms1</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_ms1))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[84]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH375Host
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetMode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DeviceConnect
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostHID_SendReport
</UL>

<P><STRONG><a name="[9e]"></a>des</STRONG> (Thumb, 308 bytes, Stack size 104 bytes, des.o(i.des))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = des &rArr; compute_subkeys &rArr; transpose
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_subkeys
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportPack_encrypt
</UL>

<P><STRONG><a name="[169]"></a>fm25CL64_gpio_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_dri.o(i.fm25CL64_gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fm25CL64_gpio_Init &rArr; SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[8f]"></a>mInitCH375Host</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, para.o(i.mInitCH375Host))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mInitCH375Host &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_PORT_INIT
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[44]"></a>main</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = main &rArr; CH375_APP &rArr; PrintfPlaySingle &rArr; PrintStrOut &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25CL64_gpio_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_que_AllRegistInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOpenGSM_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_defaults
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64B_Text
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a6]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[9a]"></a>que_Read</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, queue.o(i.que_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = que_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[16f]"></a>que_Regist</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i.que_Regist))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_Init
</UL>

<P><STRONG><a name="[141]"></a>que_Write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, queue.o(i.que_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = que_Write &rArr; que_size
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_size
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>que_size</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(i.que_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = que_size
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_Write
</UL>

<P><STRONG><a name="[16c]"></a>queue_Init</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, queue.o(i.queue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = queue_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_Regist
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>sort_u32</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tm_string.o(i.sort_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sort_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_EatBig_LoseSmall
</UL>

<P><STRONG><a name="[90]"></a>sprint</STRONG> (Thumb, 48 bytes, Stack size 120 bytes, debug.o(i.sprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FilterScan
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfPlaySingle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStrOut
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckProntPaper
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateWillResults
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal_2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SmsOneDeal
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_SendSMS_Pack
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_DeleteSMS
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAM_SmsRecCms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH375Host
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostHID_SendReport
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithStakeOrder_19
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithRoadOrderResult_A0
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithResultOrder_A3
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_EatBig_LoseSmall
</UL>

<P><STRONG><a name="[133]"></a>tm_Timer_MultiScan</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, multi_timer.o(i.tm_Timer_MultiScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tm_Timer_MultiScan
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>tm_strstr</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, tm_string.o(i.tm_strstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tm_strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
</UL>

<P><STRONG><a name="[ac]"></a>tm_timer_CheckFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, multi_timer.o(i.tm_timer_CheckFlag))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfPlaySingle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckProntPaper
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
</UL>

<P><STRONG><a name="[ad]"></a>tm_timer_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, multi_timer.o(i.tm_timer_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfPlaySingle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckProntPaper
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
</UL>

<P><STRONG><a name="[91]"></a>tm_timer_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, multi_timer.o(i.tm_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfPlaySingle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckProntPaper
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
</UL>

<P><STRONG><a name="[92]"></a>tm_timer_start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, multi_timer.o(i.tm_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tm_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_APP
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfPlaySingle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckProntPaper
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_ControlStateMachine
</UL>

<P><STRONG><a name="[170]"></a>tm_timer_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, multi_timer.o(i.tm_timer_stop))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_Timer_MultiScan
</UL>

<P><STRONG><a name="[85]"></a>xReadCH375Data</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, para.o(i.xReadCH375Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = xReadCH375Data &rArr; TM_GPIO_Init &rArr; TM_GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GPIO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH375Host
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetMode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetIntStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DeviceConnect
</UL>

<P><STRONG><a name="[83]"></a>xWriteCH375Cmd</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, para.o(i.xWriteCH375Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH375Host
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375StartTrans
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetRetry
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetMode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetFreq
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetDeviceConf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetDeviceAddr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetIntStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetFreq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetDeviceDesc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DeviceConnect
</UL>

<P><STRONG><a name="[89]"></a>xWriteCH375Data</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, para.o(i.xWriteCH375Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH375Host
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375StartTrans
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetRetry
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetMode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetFreq
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetDeviceConf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375SetDeviceAddr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetFreq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetDeviceDesc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[130]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[15c]"></a>dump_stack</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cm_backtrace.o(i.dump_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dump_stack &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[15d]"></a>fault_diagnosis</STRONG> (Thumb, 520 bytes, Stack size 16 bytes, cm_backtrace.o(i.fault_diagnosis))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fault_diagnosis &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[15e]"></a>print_call_stack</STRONG> (Thumb, 112 bytes, Stack size 96 bytes, cm_backtrace.o(i.print_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = print_call_stack &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[162]"></a>compute_subkeys</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, des.o(i.compute_subkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = compute_subkeys &rArr; transpose
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_l
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des
</UL>

<P><STRONG><a name="[164]"></a>rotate_l</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, des.o(i.rotate_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rotate_l
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_subkeys
</UL>

<P><STRONG><a name="[163]"></a>transpose</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, des.o(i.transpose))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = transpose
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_subkeys
</UL>

<P><STRONG><a name="[11c]"></a>dev_SaveReadByte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hid_data.o(i.dev_SaveReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dev_SaveReadByte &rArr; FM25ReadString &rArr; FM25CL64B_ReadByte &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25ReadString
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotalPoints
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlaySingle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInningNum
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoutResult
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoutCout
</UL>

<P><STRONG><a name="[126]"></a>dev_SaveWriteByte</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, hid_data.o(i.dev_SaveWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dev_SaveWriteByte &rArr; FM25WriteString &rArr; FM25CL64B_WriteByte &rArr; FM25CL64B_Write_Enable &rArr; SPI_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25WriteString
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstFlag
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearResult_100bout
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTotalPoints
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePlaySingle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInningNum
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBoutResult
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBoutCout
</UL>

<P><STRONG><a name="[10f]"></a>oneSignalStabillzerOneKey</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, key.o(i.oneSignalStabillzerOneKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oneSignalStabillzerOneKey
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FilterScan
</UL>

<P><STRONG><a name="[bb]"></a>CheckProntPaper</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, printer.o(i.CheckProntPaper))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CheckProntPaper &rArr; sprint &rArr; Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_ClearFlag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_timer_CheckFlag
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printer_RecDatUser
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinterSendCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinterSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfPlaySingle
</UL>

<P><STRONG><a name="[d2]"></a>DataStageIn</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usb_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[d5]"></a>DataStageOut</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, usb_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DataStageOut
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[d8]"></a>Data_Setup0</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, usb_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[111]"></a>NoData_Setup0</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, usb_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[10a]"></a>IntToUnicode</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, hw_config.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[153]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[151]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[156]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[155]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[54]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[53]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[49]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
